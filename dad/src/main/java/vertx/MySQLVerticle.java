package vertx;

import io.netty.handler.codec.mqtt.MqttConnectReturnCode;
import io.netty.handler.codec.mqtt.MqttQoS;
import io.vertx.core.AbstractVerticle;
import io.vertx.core.Promise;
import io.vertx.core.buffer.Buffer;
import io.vertx.core.json.Json;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.web.Router;
import io.vertx.ext.web.RoutingContext;
import io.vertx.ext.web.handler.BodyHandler;
import io.vertx.mqtt.MqttClient;
import io.vertx.mqtt.MqttClientOptions;
import io.vertx.mqtt.impl.MqttClientImpl;
import io.vertx.mysqlclient.MySQLClient;
import io.vertx.mysqlclient.MySQLConnectOptions;
import io.vertx.mysqlclient.MySQLPool;
import io.vertx.sqlclient.PoolOptions;
import io.vertx.sqlclient.Row;
import io.vertx.sqlclient.RowSet;
import io.vertx.sqlclient.Tuple;
import mqtt.ParkingMqttClient;
import types.Dispositivo;
import types.Led;
import types.LedState;
import types.SensorUltraSonido;
import types.SensorValue;



public class MySQLVerticle {

	private MySQLPool mySQLPool;
	private String classInstanceId;
	private MqttClient mqttClient;

	public void start(Promise<Void> startPromise) {
		MySQLConnectOptions mySQLConnectOptions = new MySQLConnectOptions().setPort(3306).setHost("localhost")
				.setDatabase("parkingpt").setUser("dad").setPassword("dad");
		PoolOptions poolOptions = new PoolOptions().setMaxSize(5);
		mySQLPool = MySQLPool.pool(vertx, mySQLConnectOptions, poolOptions);
		
		Router router = Router.router(vertx);
		router.route().handler(BodyHandler.create());

		vertx.createHttpServer().requestHandler(router::handle).listen(8080, result -> {
			if (result.succeeded()) {
				startPromise.complete();
			}else {
				startPromise.fail(result.cause());
			}
		});

		/*Sensores
		 	o POST /api/sensors
			o GET /api/sensors/{id}
			o GET /api/sensors
			o PUT /api/sensors/{id}
			o DELETE /api/sensors/{id}
		*/
		router.post("/api/sensors").handler(this::postSensors);
		router.get("/api/sensors/:idSensor").handler(this::getSensor);
		router.get("/api/sensors").handler(this::getSensor);
		router.put("/api/sensors/:idSensor").handler(this::putSensor);
		router.delete("/api/device/:idDevice").handler(this::deleteSensor);
		
		/*Actuadores
		 	o POST /api/sensors
			o GET /api/sensors/{id}
			o GET /api/sensors
			o PUT /api/sensors/{id}
			o DELETE /api/sensors/{id}
		*/
		router.post("/api/actuators").handler(this::postActuators);
		router.get("/api/actuators/:idActuator").handler(this::getActuators);
		router.get("/api/actuators").handler(this::getActuators);
		router.put("/api/actuators/:idActuator").handler(this::putActuators);
		router.delete("/api/actuators/:idActuator").handler(this::deleteActuators);
		
		
		/*Dispositivos
			o POST /api/devices
			o GET /api/devices/{id}
			o GET /api/devices
			o PUT /api/devices/{id}
			o DELETE /api/devices/{id}
		*/
		router.post("/api/devices").handler(this::postDevices);
		router.get("/api/devices/:idDevice").handler(this::getDevices);
		router.get("/api/devices").handler(this::getDevices);
		router.put("/api/devices/:idDevice").handler(this::putDevice);
		router.delete("/api/devices/:idDevice").handler(this::deleteDevices);
		
		/*Grupos
		 	o POST /api/groups
			o GET /api/groups/{id}
			o GET /api/groups
			o PUT /api/groups/{id}
			o DELETE /api/groups/{id}
		*/
		//router.post("/api/groups").handler(this::postGroups);
		//router.get("/api/groups/:idGroups").handler(this::getGroups);
		//router.get("/api/groups").handler(this::getGroups);
		//router.put("/api/groups/:idGroups").handler(this::putGroups);
		//router.delete("/api/groups/:idGroups").handler(this::deleteGroups);
		
		
		/*SensorValue y ActuatorState
		 	o POST /api/sensorValues
			o GET /api/sensorValues/{id_sensor}

			o POST /api/actuatorStates
			o GET /api/actuatorStates/{id_actuator}
		 */
		router.post("/api/sensorValues").handler(this::postSensorValues);
		router.get("/api/sensorValues/:idSensor").handler(this::getSensorValues);
		router.post("/api/actuatorStates").handler(this::postActuatorStates);
		router.get("/api/actuatorStates/:idActuator").handler(this::getActuatorStates);
		
		
		
		
		
		
		//Creación del cliente MQTT para cuando hagamos POST en los actuadores
		classInstanceId = this.hashCode() + "";
		MqttClientOptions options = new MqttClientOptions();
		options.setAutoKeepAlive(true);
		options.setAutoGeneratedClientId(false);
		options.setClientId(classInstanceId);
		options.setConnectTimeout(5000);
		options.setCleanSession(true);
		options.setKeepAliveInterval(10000);
		options.setReconnectAttempts(10);
		options.setReconnectInterval(5000);
		options.setUsername("mqttbroker");
		options.setPassword("mqttbrokerpass");
		mqttClient = new MqttClientImpl(vertx, options);
		
		mqttClient.connect(1885, "localhost", handler -> {
			if (handler.result().code() == MqttConnectReturnCode.CONNECTION_ACCEPTED) {
				mqttClient.subscribe(ParkingMqttClient.TOPIC_LED, MqttQoS.AT_LEAST_ONCE.value(),
						handlerSubscribe -> {
							if (handlerSubscribe.succeeded()) {
								System.out.println(classInstanceId + " subscribed to " + MqttServerVerticle.TOPIC_LED
										+ " channel");
							} else {
								System.out.println(
										classInstanceId + " NOT subscribed to " + MqttServerVerticle.TOPIC_LED
												+ " channel " + handlerSubscribe.cause().toString());
							}
						});

			} else {
				System.out.println("Error: " + handler.result().code().toString());
			}
		});
	}
	
	//getDevices
	
	private void getDevices(RoutingContext routingContext) {
		mySQLPool.query("SELECT * FROM device WHERE id_dispositivo = " + routingContext.request().getParam("id_dispositivo"))
		.execute(
				res -> {
					if (res.succeeded()) {	
						RowSet<Row> resultSet = res.result();
						JsonArray result = new JsonArray();
						
						for (Row row : resultSet) {
							result.add(JsonObject.mapFrom(new Dispositivo(row.getInteger("id_dispositivo"),
									row.getString("plaza"), row.getInteger("id_grupo"))));
						}
						routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
						.end(result.encodePrettily());
						}else {
							routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
							.end((JsonObject.mapFrom(res.cause()).encodePrettily()));
					}
				});
	}
	
	private void getSensor(RoutingContext routingContext) {  //Información del sensor de un dispositivo
		mySQLPool.query("SELECT * FROM sensor WHERE id_dispositivo = " + routingContext.request().getParam("id_dispositivo"))
		.execute(
				res -> {
					if (res.succeeded()) {	
						RowSet<Row> resultSet = res.result();
						JsonArray result = new JsonArray();
						
						for (Row row : resultSet) {
							result.add(JsonObject.mapFrom(new Dispositivo(row.getInteger("id_dispositivo"),
									row.getString("plaza"),row.getInteger("id_grupo") )));
						}
						routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
						.end(result.encodePrettily());
						}else {
							routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
							.end((JsonObject.mapFrom(res.cause()).encodePrettily()));
					}
				});
	}
	
	private void getActuators(RoutingContext routingContext) {  //Devuelve el actuador de un dispostitivo
		mySQLPool.query("SELECT * FROM actuator WHERE id_dispositivo = " + routingContext.request().getParam("id_dispositivo"))
		.execute(
				res -> {
					if (res.succeeded()) {	
						RowSet<Row> resultSet = res.result();
						JsonArray result = new JsonArray();
						
						for (Row row : resultSet) {
							result.add(JsonObject.mapFrom(new Dispositivo(row.getInteger("id_dispositivo"),
									row.getString("plaza"), row.getInteger("id_grupo"))));
						}
						routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
						.end(result.encodePrettily());
						}else {
							routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
							.end((JsonObject.mapFrom(res.cause()).encodePrettily()));
					}
				});
	}
	
	
	private void getSensorValues(RoutingContext routingContext) { //Devuelve el historial de valores del sensor. Puede hacerse filtrado por tiempo
		mySQLPool.query("SELECT * FROM sensor WHERE id_sensor = " + routingContext.request().getParam("id_sensor"))
		.execute(
				res -> {
					if (res.succeeded()) {	
						RowSet<Row> resultSet = res.result();
						for (Row row : resultSet) {
								getOcupado(routingContext);
							}
					}else{
						routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
							.end((JsonObject.mapFrom(res.cause()).encodePrettily()));
					}
				});
	}
	
	
	private void getOcupado(RoutingContext routingContext) {
		String query;
		if(routingContext.request().getParam("timestamp")==null) {
			query="SELECT * FROM sensor_values WHERE id_sensor = "
					+ routingContext.request().getParam("id_sensor");
		}else {
			query="SELECT * FROM sensor_values WHERE timestamp > "
					+ routingContext.request().getParam("timestamp") + " AND id_sensor = "
					+ routingContext.request().getParam("id_sensor");
		}
		mySQLPool.query(query).execute( res -> {
				if (res.succeeded()) {

					RowSet<Row> resultSet = res.result();
					JsonArray result = new JsonArray();

					for (Row row : resultSet) {

						result.add(JsonObject.mapFrom(new SensorValue(row.getInteger("id"),row.getInteger("id_sensor"),
								row.getFloat("valor"),
								row.getLocalDateTime("timestamp"))));
					}
					routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
						.end(result.encodePrettily());
					}else {
						routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
						.end((JsonObject.mapFrom(res.cause()).encodePrettily()));
				}
			});
	}
	
	
	private void getActuatorStates(RoutingContext routingContext) { //Obtiene el historial de valores del actuador.

		mySQLPool.query("SELECT * FROM actuator WHERE id_actuator = " + routingContext.request().getParam("id_actuator"))
		.execute(
				res -> {
					if (res.succeeded()) {	
						RowSet<Row> resultSet = res.result();
						for (Row row : resultSet) {
							getEncendido(routingContext);
						}
					}else{
						routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
							.end((JsonObject.mapFrom(res.cause()).encodePrettily()));
					}
				});
	}
	
	
	private void getEncendido(RoutingContext routingContext) {
		String query;
		if(routingContext.request().getParam("timestamp")==null) {
			query="SELECT * FROM actuator_states WHERE idactuator = "
					+ routingContext.request().getParam("id_actuator");
		}else {
			query="SELECT * FROM actuator_states WHERE timestamp > "
					+ routingContext.request().getParam("timestamp") + " AND id_actuator = "
					+ routingContext.request().getParam("id_actuator");
		}
		mySQLPool.query(query).execute( res -> {
			if (res.succeeded()) {
				
				RowSet<Row> resultSet = res.result();
				JsonArray result = new JsonArray();
				
				for (Row row : resultSet) {	
					result.add(JsonObject.mapFrom(new Led(row.getInteger("id_actuator"),
							row.getString("nombre"),row.getString("tipo"),row.getString("identificador"),
							row.getInteger("id_dispositivo"))));
				}
				routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
				.end(result.encodePrettily());
				}else {
					routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
					.end((JsonObject.mapFrom(res.cause()).encodePrettily()));
			}
		});
	}
	
	private void putDevice(RoutingContext routingContext) { //Actualiza un dispositivo
		Dispositivo device = Json.decodeValue(routingContext.getBodyAsString(), Dispositivo.class);
		mySQLPool.preparedQuery(
				"UPDATE devices SET plaza = ? WHERE id_dispositivo = ?")
		.execute(
				Tuple.of(device.getPlaza(), routingContext.request().getParam("id_dispositivo")),
				handler -> {
					if (handler.succeeded()) {
						routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
								.end(JsonObject.mapFrom(device).encodePrettily());
					} else {
						routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
								.end((JsonObject.mapFrom(handler.cause()).encodePrettily()));
					}
				});
	}
	
	private void putSensor(RoutingContext routingContext) { //Actualiza un dispositivo
		Dispositivo device = Json.decodeValue(routingContext.getBodyAsString(), Dispositivo.class);
		mySQLPool.preparedQuery(
				"UPDATE sensors SET nombre = ? WHERE id_sensor = ?")
		.execute(
				Tuple.of(device.getPlaza(), routingContext.request().getParam("id_sensor")),
				handler -> {
					if (handler.succeeded()) {
						routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
								.end(JsonObject.mapFrom(device).encodePrettily());
					} else {
						routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
								.end((JsonObject.mapFrom(handler.cause()).encodePrettily()));
					}
				});
	}
	
	private void putActuators(RoutingContext routingContext) { //Actualiza un dispositivo
		Dispositivo device = Json.decodeValue(routingContext.getBodyAsString(), Dispositivo.class);
		mySQLPool.preparedQuery(
				"UPDATE actuators SET nombre = ? WHERE id_actuator = ?")
		.execute(
				Tuple.of(device.getPlaza(), routingContext.request().getParam("id_actuator")),
				handler -> {
					if (handler.succeeded()) {
						routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
								.end(JsonObject.mapFrom(device).encodePrettily());
					} else {
						routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
								.end((JsonObject.mapFrom(handler.cause()).encodePrettily()));
					}
				});
	}
	
	
	
	private void postDevices(RoutingContext routingContext) {
		Dispositivo device = Json.decodeValue(routingContext.getBodyAsString(), Dispositivo.class);	
		
		mySQLPool.preparedQuery("INSERT INTO devices (plaza, id_user) VALUES (?,?)")
		.execute(
				Tuple.of(device.getPlaza(), device.getId()),
				handler -> {
					
					if (handler.succeeded()) {
						
						RowSet<Row> rows = handler.result();
						int lastInsertId = (int) (long) rows.property(MySQLClient.LAST_INSERTED_ID);
						
						mySQLPool.preparedQuery("INSERT INTO actuators (tipo,id_dispositivo,nombre) VALUES (?,?,?)")
						.execute(
								Tuple.of("basic",lastInsertId,"led"),
								handlerAux -> {
									if (handlerAux.succeeded()) {
										
										routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
												.end(JsonObject.mapFrom(device).encodePrettily());
										
										}else {
											routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
											.end((JsonObject.mapFrom(handlerAux.cause()).encodePrettily()));
									}
								});
								
						mySQLPool.preparedQuery("INSERT INTO sensors (tipo,id_dispositivo,nombre) VALUES (?,?,?)")
						.execute(
								Tuple.of("valor",lastInsertId,"valor"),
								handlerAux -> {
									if (handlerAux.succeeded()) {
										
										routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
												.end(JsonObject.mapFrom(device).encodePrettily());
										
										}else {
											routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
											.end((JsonObject.mapFrom(handlerAux.cause()).encodePrettily()));
									}
								});
						
						routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
								.end(JsonObject.mapFrom(device).encodePrettily());
						
						}else {
							routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
							.end((JsonObject.mapFrom(handler.cause()).encodePrettily()));
					}
				});
	}
	
	
	private void postSensors(RoutingContext routingContext){
		SensorUltraSonido sensorUltraSonido = Json.decodeValue(routingContext.getBodyAsString(), SensorUltraSonido.class);	
		mySQLPool.preparedQuery("INSERT INTO sensors (nombre, timestamp, id_dispositivo) VALUES (?,?,?)")
		.execute(
				Tuple.of(SensorUltraSonido.getThresholdDistancia(), System.currentTimeMillis(),
						routingContext.request().getParam("id_sensor")),
				handler -> {
					
					if (handler.succeeded()) {
						routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
								.end(JsonObject.mapFrom(sensorUltraSonido).encodePrettily());
						
						mqttClient.publish(ParkingMqttClient.TOPIC_LED,
								Buffer.buffer(JsonObject.mapFrom(sensorUltraSonido).encodePrettily()), MqttQoS.AT_LEAST_ONCE, false, false);
						
						}else {
							routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
							.end((JsonObject.mapFrom(handler.cause()).encodePrettily()));
					}
				});
		
	}
	
	
	private void postActuators(RoutingContext routingContext){
		LedState led = Json.decodeValue(routingContext.getBodyAsString(), LedState.class);	
		mySQLPool.preparedQuery("INSERT INTO actuators (nombre, timestamp, id_actuator) VALUES (?,?,?)")
		.execute(
				Tuple.of(led.getEstado(), System.currentTimeMillis(),
						routingContext.request().getParam("id_actuator")),
				handler -> {
					
					if (handler.succeeded()) {
						routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
								.end(JsonObject.mapFrom(led).encodePrettily());
						
						mqttClient.publish(ParkingMqttClient.TOPIC_LED,
								Buffer.buffer(JsonObject.mapFrom(led).encodePrettily()), MqttQoS.AT_LEAST_ONCE, false, false);
						
						}else {
							routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
							.end((JsonObject.mapFrom(handler.cause()).encodePrettily()));
					}
				});
		
	}
	
	
	private void postSensorValues(RoutingContext routingContext){
		SensorUltraSonido sensorUltraSonido = Json.decodeValue(routingContext.getBodyAsString(), SensorUltraSonido.class);	
		mySQLPool.preparedQuery("INSERT INTO sensor_value (id_sensor, valor, timestamp) VALUES (?,?,?)")
		.execute(
				Tuple.of(SensorUltraSonido.getThresholdDistancia(), System.currentTimeMillis(),
						routingContext.request().getParam("id_sensor")),
				handler -> {
					
					if (handler.succeeded()) {
						routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
								.end(JsonObject.mapFrom(sensorUltraSonido).encodePrettily());
						
						mqttClient.publish(ParkingMqttClient.TOPIC_LED,
								Buffer.buffer(JsonObject.mapFrom(sensorUltraSonido).encodePrettily()), MqttQoS.AT_LEAST_ONCE, false, false);
						
						}else {
							routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
							.end((JsonObject.mapFrom(handler.cause()).encodePrettily()));
					}
				});
		
	}
	
	
	
	private void postActuatorStates(RoutingContext routingContext){
		LedState led = Json.decodeValue(routingContext.getBodyAsString(), LedState.class);	
		mySQLPool.preparedQuery("INSERT INTO actuator_states (id_actuator, estado, timestamp) VALUES (?,?,?)")
		.execute(
				Tuple.of(led.getEstado(), System.currentTimeMillis(),
						routingContext.request().getParam("id_actuator")),
				handler -> {
					
					if (handler.succeeded()) {
						routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
								.end(JsonObject.mapFrom(led).encodePrettily());
						
						mqttClient.publish(ParkingMqttClient.TOPIC_LED,
								Buffer.buffer(JsonObject.mapFrom(led).encodePrettily()), MqttQoS.AT_LEAST_ONCE, false, false);
						
						}else {
							routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
							.end((JsonObject.mapFrom(handler.cause()).encodePrettily()));
					}
				});
		
	}
	
	private void deleteDevices(RoutingContext routingContext) {
		
		mySQLPool.query("DELETE FROM devices WHERE id =  " + routingContext.request().getParam("id"))
		.execute(
				handler -> {
					
					if (handler.succeeded()) {
						routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
								.end("Dispositivo borrado correctamente");
						
						}else {
							routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
							.end((JsonObject.mapFrom(handler.cause()).encodePrettily()));
					}
				});
	}




	
	private void deleteActuators(RoutingContext routingContext) {
	
		mySQLPool.query("DELETE FROM actuators WHERE id_actuator =  " + routingContext.request().getParam("id_actuator"))
		.execute(
				handler -> {
					
					if (handler.succeeded()) {
						routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
								.end("Actuador borrado correctamente");
						
						}else {
							routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
							.end((JsonObject.mapFrom(handler.cause()).encodePrettily()));
					}
				});
	}
	
	

	
	private void deleteSensor(RoutingContext routingContext) {
		
		mySQLPool.query("DELETE FROM sensors WHERE id_sensor =  " + routingContext.request().getParam("id_sensor"))
		.execute(
				handler -> {
					
					if (handler.succeeded()) {
						routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
								.end("Sensor borrado correctamente");
						
						}else {
							routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
							.end((JsonObject.mapFrom(handler.cause()).encodePrettily()));
					}
				});
	}
	
	
}